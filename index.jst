doctype(html)

html {

head{
    title | JST - HTML Template Engine with JavaScript
}

// As you can see, since we are using block, we can save unimportant indents.
// Making code actually more readable.
body
{

article {
    h2 | Getting Started

    p | Write tags like this:

    /*
    {{
        var code = `
            div
            custom
        `;

        {{
            pre code.code {{code}}

            // this code will be processed by hook to transpile again to html.
            pre code.code.rendered {{code}}
        }}
    }}
    */

    pre code.code `
        div
        custom
    `

    pre code.code.rendered `
        <div></div>
        <custom></custom>
    `

    p | Nest tags inside `{` `}` brackets:

    pre code.code `
        ul {
            li {}
            li {}
        }
    `

    pre code.code.rendered `
        <ul>
            <li></li>
            <li></li>
        </ul>
    `

    p "See " + a(href="#block") {"Block"} + " for detail."

    p | Write text like this:

    pre code.code `
        p | Text goes here in a single line.
    `

    pre code.code.rendered `
        <p>Text goes here in a single line.</p>
    `

    p | Add attributes like this:

    pre code.code `
        a(href="#user" title="User Avatar") {
            img(src="asset/guest.png" alt="Guest Avatar Image")
        }
    `

    pre code.code.rendered `
        <a href="#user" title="User Avatar">
            <img src="asset/guest.png" alt="Guest Avatar Image">
        </a>
    `
}

article {
    h2 | Tag and Block

    p | Write tag with block enclosed by `{` and `}`.

    pre code.code `
        ul {
            li {}

            li {}
        }
    `

    pre code.code.rendered `
        <ul>
            <li></li>
            <li></li>
        </ul>
    `

    p | Note: blank lines are just ignored.

    p | Block can has leading spaces.

    pre code.code `
        div {}
    `

    p | Block can stick close to tag without space.

    pre code.code `
        div{}
    `

    p | Block can in next line.

    pre code.code `
        div
        {
        }
    `

    p | Block can left behind multiple lines of tag

    pre code.code `
        div

        {
        }
    `

    p | Block can in a single line.

    pre code.code `
        div { a { img } }
    `

    pre code.code.rendered `
        <div><a><img /></a></div>
    `

    p | In single line mode, you can omit the `{` and `}` symbol.

    pre code.code `
        div a img
    `

    pre code.code.rendered `
        <div><a><img /></a></div>
    `

    p | Whenever there is no nesting tag, block can be omitted.

    pre code.code `
        p {
            | As you can see.
            br
            | You are not forced to add unnecessary blocks.
        }
    `

    pre code.code.rendered `
        <p>As you can see.<br>You are not forced to add unnecessary blocks.</p>
    `

    `
    li() {
        // when # or . shorthand used inside an inline element,
        // the implicit tag name becomes span rather then div.
        em .highlight
        // <em><span class="highlight"></span></em>
    }
    `

}

article {
    h2 | Attributes

    // attribute set must stick close to tag without space.
    // attribute set may span multiple lines
    // inner text must lead by `|` char
    a(
        class =
            'hot'
        class
            := 'active'
    ) | inner text here. once there is inner text, the sequence can't have any more tag or block.
}

article {
    h2 | Plain Text

    p {
        | of course you can put inner text inside a block and lead by the `|` pipe char.
        | but must be in trail of a line,
        | because the '|' char treat everything after it as normal text, including the '}' char.

        "or use quote"

        `
        multiple lines
        multiple lines
        `
    }

    li | inner text can lead by the `|` pipe char.
    li "inner text can lead by the `|` pipe char."
    li { "inline block with quoted text, but not with piped text" }
}

article {
    h2 | Sibling
}


    ul {

    // when in `{}` block mode, ignore first child tag's indent, but warn if not correct.
    // once got new tag, begins new block mode. can be either `{` block or INDENT block.
    li
    // if no '{' block found, assume indent block mode.
    // and end with next same level indent of anything.


        li {
            h1 | title
            .article{
                "contents go "
                a(href='#') | here
            }
        }

        // sibling
        li h1{"title"} + .article{"contents go " + a(href='#') {"here"}}

        li()
    }
}

}
