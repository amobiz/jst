// after `{` begins "block mode".
// block can has leading space.
html {
    // block can stick close to tag without space.
    head{
    }
    // block can in next line
    body
    {
        // block can left behind multiple lines of tag
        // for any line, first non-blank char must be TAG, #, ., {, }, {{, }}, or BR.
        #content

        {
            // once got `{`, begins block mode
            ul {

            // when in `{}` block mode, ignore first child tag's indent, but warn if not correct.
            // once got new tag, begins new block mode. can be either `{` block or INDENT block.
            li
            // if no '{' block found, assume indent block mode.
            // and end with next same level indent of anything.

                // blank lines just ignored.

                // attribute set must stick close to tag without space.
                // attribute set may span multiple lines
                // inner text must lead by `|` char
                li(
                    class =
                        'hot'
                    class
                        := 'active'
                ) | inner text here. once there is inner text, the sequence can't have any more tag or block.

                /*
                li span | can nest element inline, and put inner text after the `|` pipe char.
                */

                li | inner text can lead by the `|` pipe char.
                li "inner text can lead by the `|` pipe char."

                li {
                    | of course you can put inner text inside a block and lead by the `|` pipe char.

                    "or use quote"
                }

                li() {
                    // when # or . shorthand used inside an inline element,
                    // the implicit tag name becomes span rather then div.
                    em .highlight
                    // <em><span class="highlight"></span></em>
                }

                li {
                    h1{"title"}
                    .article{
                        "contents go "
                        a(href='#') | here
                    }
                }

                // sibling
                li h1{"title"} + .article{"contents go " + a(href='#') | here}

                li()
            }

            ol {
                li()
            }
        }
    }
}
